<?xml version="1.0" encoding="UTF-8" ?>
<x:schema xmlns:x="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1" xmlns:xerces="http://xerces.apache.org">

	<!-- definition of the task parameters -->
	<x:complexType name="sam2bamTaskParameterType">
		<x:all>
			<x:element name="sam" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<x:element name="bam" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<x:element name="threads" type="paramIntegerRange_threads_sam2bam" minOccurs="0" maxOccurs="1" />
			<x:element name="quality" type="paramIntegerRange_quality_sam2bam" minOccurs="0" maxOccurs="1" />
			<x:element name="memory" type="paramString_quality_sam2bam" minOccurs="0" maxOccurs="1" />
			<x:element name="tmpFolder" type="paramAbsoluteFilePath" minOccurs="0" maxOccurs="1" />
		</x:all>
	</x:complexType>

	<!-- change default attributes -->
	<x:complexType name="sam2bamTaskOverrideType">
		<x:complexContent>
			<x:restriction base="baseAttributeTaskType">
				<x:attribute name="binName" type="x:string" fixed="sam2bam.sh" />
			</x:restriction>
		</x:complexContent>
	</x:complexType>

	<!-- definition of final task -->
	<x:complexType name="sam2bamTaskType">
		<x:complexContent>
			<x:extension base="sam2bamTaskOverrideType">
				<x:all>
					<x:element name="parameter" type="sam2bamTaskParameterType" minOccurs="1" maxOccurs="1" />
					<x:element name="return" type="sam2bamTaskReturnType" minOccurs="0" maxOccurs="0" />
					<x:group ref="defaultTaskElements" />
				</x:all>
			</x:extension>
		</x:complexContent>
	</x:complexType>

	<x:complexType name="sam2bamTaskReturnType">
		<x:complexContent>
			<x:extension base="taskReturnType">
				<x:all>
					<x:element name="BAMFile" type="x:string"/>
				</x:all>
			</x:extension>
		</x:complexContent>
	</x:complexType>

	<!-- make task definition availible via substitution group -->
	<x:element name="sam2bamTask" type="sam2bamTaskType" substitutionGroup="abstractTask" />

	<!-- module specific parameter types -->
	<x:complexType name="paramIntegerRange_threads_sam2bam">
		<x:simpleContent>
			<x:restriction base="paramInteger">
				<x:assert test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or (128 >= $value and 1 &lt;= $value)" xerces:message="Parameter with name '{$tag}' must be between 1 and 128." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramIntegerRange_quality_sam2bam">
		<x:simpleContent>
			<x:restriction base="paramInteger">
				<x:assert test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or (9 >= $value and 1 &lt;= $value)" xerces:message="Parameter with name '{$tag}' must be between 1 and 9." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramString_quality_sam2bam">
		<x:simpleContent>
			<x:restriction base="paramString">
				<x:assert test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or matches($value, '[0-9]+[KMG]')" xerces:message="Parameter with name '{$tag}' must match pattern '[0-9]+[KMG]'." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>

</x:schema>
